linkerdTrustAnchorItemPath: "vaults/vault_name_or_uuid/items/item_name_or_uuid"
webhookTrustAnchorItemPath: "vaults/vault_name_or_uuid/items/item_name_or_uuid"

linkerd-control-plane:
  # -- Create PodDisruptionBudget resources for each control plane workload
  enablePodDisruptionBudget: true

  # -- Specify a deployment strategy for each control plane workload
  deploymentStrategy:
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 25%

  # -- add PodAntiAffinity to each control plane workload
  enablePodAntiAffinity: true

  # nodeAffinity: 

  # proxy configuration
  proxy:
    resources:
      cpu:
        request: 100m
      memory:
        limit: 250Mi
        request: 20Mi

  # controller configuration
  controllerReplicas: 3
  controllerResources: &controller_resources
    cpu: &controller_resources_cpu
      limit: ""
      request: 100m
    memory:
      limit: 250Mi
      request: 50Mi
  destinationResources: *controller_resources

  # identity configuration
  identityResources:
    cpu: *controller_resources_cpu
    memory:
      limit: 250Mi
      request: 10Mi

  # heartbeat configuration
  heartbeatResources: *controller_resources

  # proxy injector configuration
  proxyInjectorResources: *controller_resources
  webhookFailurePolicy: Fail

  # service profile validator configuration
  spValidatorResources: *controller_resources

  # policy controller configuration
  policyControllerResources: *controller_resources

  # flag for linkerd check
  highAvailability: true

  # -- Log level for the control plane components
  controllerLogLevel: debug

  # -- Trust root certificate (ECDSA). It must be provided during install.
  identityTrustAnchorsPEM: |
    -----BEGIN CERTIFICATE-----
    MIIBjjCCATOgAwIBAgIQcQLiXQmDaVi8/ohdyznujjAKBggqhkjOPQQDAjAlMSMw
    IQYDVQQDExpyb290LmxpbmtlcmQuY2x1c3Rlci5sb2NhbDAeFw0yNDAyMjYwNTAx
    MDJaFw0zNDAyMjMwNTAxMDJaMCUxIzAhBgNVBAMTGnJvb3QubGlua2VyZC5jbHVz
    dGVyLmxvY2FsMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEAbO3YFtKSX88mV6u
    LXQb/q6QeZbBeIk1V7hgUL/67SKPvDjkt61gu28JwnbTCnilYamTgCh2irhUF6vs
    qu+xKqNFMEMwDgYDVR0PAQH/BAQDAgEGMBIGA1UdEwEB/wQIMAYBAf8CAQEwHQYD
    VR0OBBYEFFuwSzcVpFU1e7wmaJjA1f3KiPdkMAoGCCqGSM49BAMCA0kAMEYCIQDO
    vU2Hpx8cUQGvP2maZA7U5ib5s7Zm7IITjVUIsU2aqwIhALqLR07Yf59hWjwyOFvE
    ZszIxuy7QaFoPAlYds2RpGll
    -----END CERTIFICATE-----

  identity:
    issuer:
      scheme: kubernetes.io/tls

  # proxy injector configuration
  proxyInjector:
    # -- Do not create a secret resource for the proxyInjector webhook.
    # If this is set to `true`, the value `proxyInjector.caBundle` must be set
    # or the ca bundle must injected with cert-manager ca injector using
    # `proxyInjector.injectCaFrom` or `proxyInjector.injectCaFromSecret` (see below).
    externalSecret: true

    caBundle: |
      -----BEGIN CERTIFICATE-----
      MIIBlDCCATmgAwIBAgIQWfY4O1HX0/LxzHoWv2Z69jAKBggqhkjOPQQDAjAoMSYw
      JAYDVQQDEx13ZWJob29rLmxpbmtlcmQuY2x1c3Rlci5sb2NhbDAeFw0yNDAyMjYw
      NDM5MjBaFw0zNDAyMjMwNDM5MjBaMCgxJjAkBgNVBAMTHXdlYmhvb2subGlua2Vy
      ZC5jbHVzdGVyLmxvY2FsMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAESrL3BiXn
      2nQdzH6KK9M8+1EhWxGA0JNLh60A2n+QVdZFoHXs554jPTuMs+dlQcfCQHdPx6DE
      mW8UFTX5hbRSKKNFMEMwDgYDVR0PAQH/BAQDAgEGMBIGA1UdEwEB/wQIMAYBAf8C
      AQEwHQYDVR0OBBYEFEFU+TwoBoxdlHktO8oEnRa6ywnXMAoGCCqGSM49BAMCA0kA
      MEYCIQDQToVbyG0hYN+BQMEdRXSXrHSIQyodM+eqqs2VErMsdgIhAIO+/to80feo
      UQH469m0gI0zG1bAyfdhlpCfKwuDPR1T
      -----END CERTIFICATE-----


  # service profile validator configuration
  profileValidator:
    # -- Do not create a secret resource for the profileValidator webhook.
    # If this is set to `true`, the value `proxyInjector.caBundle` must be set
    # or the ca bundle must injected with cert-manager ca injector using
    # `proxyInjector.injectCaFrom` or `proxyInjector.injectCaFromSecret` (see below).
    externalSecret: true

    caBundle: |
      -----BEGIN CERTIFICATE-----
      MIIBlDCCATmgAwIBAgIQWfY4O1HX0/LxzHoWv2Z69jAKBggqhkjOPQQDAjAoMSYw
      JAYDVQQDEx13ZWJob29rLmxpbmtlcmQuY2x1c3Rlci5sb2NhbDAeFw0yNDAyMjYw
      NDM5MjBaFw0zNDAyMjMwNDM5MjBaMCgxJjAkBgNVBAMTHXdlYmhvb2subGlua2Vy
      ZC5jbHVzdGVyLmxvY2FsMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAESrL3BiXn
      2nQdzH6KK9M8+1EhWxGA0JNLh60A2n+QVdZFoHXs554jPTuMs+dlQcfCQHdPx6DE
      mW8UFTX5hbRSKKNFMEMwDgYDVR0PAQH/BAQDAgEGMBIGA1UdEwEB/wQIMAYBAf8C
      AQEwHQYDVR0OBBYEFEFU+TwoBoxdlHktO8oEnRa6ywnXMAoGCCqGSM49BAMCA0kA
      MEYCIQDQToVbyG0hYN+BQMEdRXSXrHSIQyodM+eqqs2VErMsdgIhAIO+/to80feo
      UQH469m0gI0zG1bAyfdhlpCfKwuDPR1T
      -----END CERTIFICATE-----

  # policy validator configuration
  policyValidator:
    # -- Do not create a secret resource for the policyValidator webhook.
    # If this is set to `true`, the value `policyValidator.caBundle` must be set
    # or the ca bundle must injected with cert-manager ca injector using
    # `policyValidator.injectCaFrom` or `policyValidator.injectCaFromSecret` (see below).
    externalSecret: true

    caBundle: |
      -----BEGIN CERTIFICATE-----
      MIIBlDCCATmgAwIBAgIQWfY4O1HX0/LxzHoWv2Z69jAKBggqhkjOPQQDAjAoMSYw
      JAYDVQQDEx13ZWJob29rLmxpbmtlcmQuY2x1c3Rlci5sb2NhbDAeFw0yNDAyMjYw
      NDM5MjBaFw0zNDAyMjMwNDM5MjBaMCgxJjAkBgNVBAMTHXdlYmhvb2subGlua2Vy
      ZC5jbHVzdGVyLmxvY2FsMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAESrL3BiXn
      2nQdzH6KK9M8+1EhWxGA0JNLh60A2n+QVdZFoHXs554jPTuMs+dlQcfCQHdPx6DE
      mW8UFTX5hbRSKKNFMEMwDgYDVR0PAQH/BAQDAgEGMBIGA1UdEwEB/wQIMAYBAf8C
      AQEwHQYDVR0OBBYEFEFU+TwoBoxdlHktO8oEnRa6ywnXMAoGCCqGSM49BAMCA0kA
      MEYCIQDQToVbyG0hYN+BQMEdRXSXrHSIQyodM+eqqs2VErMsdgIhAIO+/to80feo
      UQH469m0gI0zG1bAyfdhlpCfKwuDPR1T
      -----END CERTIFICATE-----
