apiVersion: apiextensions.crossplane.io/v1
kind: Composition
metadata:
  name: cluster-aws-public-private
  labels:
    provider: aws
    cluster: eks
spec:
  compositeTypeRef:
    apiVersion: rye.ninja/v1alpha1
    kind: CompositeKubernetesCluster
  patchSets:
  - name: default-patchset
    patches:
    - type: FromCompositeFieldPath
      fromFieldPath: spec.parameters.clusterName
      toFieldPath: metadata.labels.clusterName
    - type: FromCompositeFieldPath
      fromFieldPath: spec.parameters.region
      toFieldPath: spec.forProvider.region
    - type: FromCompositeFieldPath
      fromFieldPath: spec.parameters.clusterName
      toFieldPath: spec.forProvider.tags.Name
      transforms:
        - type: string
          string:
            fmt: "%s-crossplane-ekscluster"
            type: Format

  resources:
  - name: vpc
    base:
      apiVersion: ec2.aws.upbound.io/v1beta1
      kind: VPC
      spec:
        forProvider:
          enableDnsHostnames: true
          enableDnsSupport: true
          instanceTenancy: default
          cidrBlock: 192.168.0.0/16
    readinessChecks:
      - type: MatchCondition
        matchCondition:
          status: 'True'
          type: Ready
    patches:
    - type: PatchSet
      patchSetName: default-patchset
    - type: FromCompositeFieldPath
      fromFieldPath: spec.parameters.clusterName
      toFieldPath: spec.forProvider.tags.Name
      transforms:
        - type: string
          string:
            fmt: "%s-crossplane-ekscluster"
            type: Format
    - type: FromCompositeFieldPath
      fromFieldPath: spec.parameters.vpc.cidrBlock
      toFieldPath: spec.forProvider.cidrBlock
  - name: publicSubnet-az-A
    base:
      apiVersion: ec2.aws.upbound.io/v1beta1
      kind: Subnet
      metadata:
        labels: 
          subnet: public-a
      spec:
        forProvider:
          assignIpv6AddressOnCreation: false
          enableResourceNameDnsARecordOnLaunch: false
          enableResourceNameDnsAaaaRecordOnLaunch: false
          mapPublicIpOnLaunch: true
          cidrBlock: 192.168.0.0/19
          tags:
            kubernetes.io/role/elb: "1"
          vpcIdSelector:
            matchControllerRef: true
    readinessChecks:
      - type: MatchCondition
        matchCondition:
          status: 'True'
          type: Ready
    patches:
    - type: PatchSet
      patchSetName: default-patchset
    - type: FromCompositeFieldPath
      fromFieldPath: spec.parameters.clusterName
      toFieldPath: spec.forProvider.tags.Name
      transforms:
        - type: string
          string:
            fmt: "%s-crossplane-ekscluster-public-subnet-a"
            type: Format
    - type: FromCompositeFieldPath
      fromFieldPath: spec.parameters.region
      toFieldPath: spec.forProvider.availabilityZone
      transforms:
        - type: string
          string:
            fmt: "%sa"
            type: Format
    - type: FromCompositeFieldPath
      fromFieldPath: spec.parameters.vpc.availabilityZone-a.publicCidrBlock
      toFieldPath: spec.forProvider.cidrBlock
  - name: publicSubnet-az-B
    base:
      apiVersion: ec2.aws.upbound.io/v1beta1
      kind: Subnet
      metadata:
        labels: 
          subnet: public-b
      spec:
        forProvider:
          assignIpv6AddressOnCreation: false
          enableResourceNameDnsARecordOnLaunch: false
          enableResourceNameDnsAaaaRecordOnLaunch: false
          mapPublicIpOnLaunch: true
          cidrBlock: 192.168.32.0/19
          tags:
            kubernetes.io/role/elb: "1"
          vpcIdSelector:
            matchControllerRef: true
    readinessChecks:
      - type: MatchCondition
        matchCondition:
          status: 'True'
          type: Ready
    patches:
    - type: PatchSet
      patchSetName: default-patchset
    - type: FromCompositeFieldPath
      fromFieldPath: spec.parameters.clusterName
      toFieldPath: spec.forProvider.tags.Name
      transforms:
        - type: string
          string:
            fmt: "%s-crossplane-ekscluster-public-subnet-b"
            type: Format
    - type: FromCompositeFieldPath
      fromFieldPath: spec.parameters.region
      toFieldPath: spec.forProvider.availabilityZone
      transforms:
        - type: string
          string:
            fmt: "%sb"
            type: Format
    - type: FromCompositeFieldPath
      fromFieldPath: spec.parameters.vpc.availabilityZone-b.publicCidrBlock
      toFieldPath: spec.forProvider.cidrBlock
  - name: publicSubnet-az-C
    base:
      apiVersion: ec2.aws.upbound.io/v1beta1
      kind: Subnet
      metadata:
        labels: 
          subnet: public-c
      spec:
        forProvider:
          assignIpv6AddressOnCreation: false
          enableResourceNameDnsARecordOnLaunch: false
          enableResourceNameDnsAaaaRecordOnLaunch: false
          mapPublicIpOnLaunch: true
          cidrBlock: 192.168.64.0/19
          tags:
            kubernetes.io/role/elb: "1"
          vpcIdSelector:
            matchControllerRef: true
    readinessChecks:
      - type: MatchCondition
        matchCondition:
          status: 'True'
          type: Ready
    patches:
    - type: PatchSet
      patchSetName: default-patchset
    - type: FromCompositeFieldPath
      fromFieldPath: spec.parameters.clusterName
      toFieldPath: spec.forProvider.tags.Name
      transforms:
        - type: string
          string:
            fmt: "%s-crossplane-ekscluster-public-subnet-c"
            type: Format
    - type: FromCompositeFieldPath
      fromFieldPath: spec.parameters.region
      toFieldPath: spec.forProvider.availabilityZone
      transforms:
        - type: string
          string:
            fmt: "%sc"
            type: Format
    - type: FromCompositeFieldPath
      fromFieldPath: spec.parameters.vpc.availabilityZone-b.publicCidrBlock
      toFieldPath: spec.forProvider.cidrBlock
  - name: internetGateway
    base:
      apiVersion: ec2.aws.upbound.io/v1beta1
      kind: InternetGateway
      spec:
        forProvider:
          vpcIdSelector:
            matchControllerRef: true
    readinessChecks:
      - type: MatchCondition
        matchCondition:
          status: 'True'
          type: Ready
    patches:
    - type: PatchSet
      patchSetName: default-patchset
  - name: publicRouteTable
    base:
      apiVersion: ec2.aws.upbound.io/v1beta1
      kind: RouteTable
      metadata:
        labels: 
          routetable: public
      spec:
        forProvider:
          vpcIdSelector:
            matchControllerRef: true
    readinessChecks:
      - type: MatchCondition
        matchCondition:
          status: 'True'
          type: Ready
    patches:
    - type: PatchSet
      patchSetName: default-patchset
  - name: publicRouteTableAssociation-az-A
    base:
      apiVersion: ec2.aws.upbound.io/v1beta1
      kind: RouteTableAssociation
      spec:
        forProvider:
          routeTableIdSelector:
            matchControllerRef: true
            matchLabels:
              routetable: public
          subnetIdSelector:
            matchControllerRef: true
            matchLabels:
              subnet: public-a
    readinessChecks:
      - type: MatchCondition
        matchCondition:
          status: 'True'
          type: Ready
    patches:
    - type: PatchSet
      patchSetName: default-patchset
  - name: publicRouteTableAssociation-az-B
    base:
      apiVersion: ec2.aws.upbound.io/v1beta1
      kind: RouteTableAssociation
      spec:
        forProvider:
          region: us-east-2
          routeTableIdSelector:
            matchControllerRef: true
            matchLabels:
              routetable: public
          subnetIdSelector:
            matchControllerRef: true
            matchLabels:
              subnet: public-b
    readinessChecks:
      - type: MatchCondition
        matchCondition:
          status: 'True'
          type: Ready
    patches:
    - type: PatchSet
      patchSetName: default-patchset
  - name: publicRouteTableAssociation-az-C
    base:
      apiVersion: ec2.aws.upbound.io/v1beta1
      kind: RouteTableAssociation
      spec:
        forProvider:
          routeTableIdSelector:
            matchControllerRef: true
            matchLabels:
              routetable: public
          subnetIdSelector:
            matchControllerRef: true
            matchLabels:
              subnet: public-c
    readinessChecks:
      - type: MatchCondition
        matchCondition:
          status: 'True'
          type: Ready
    patches:
    - type: PatchSet
      patchSetName: default-patchset
  - name: publicRoute
    base:
      apiVersion: ec2.aws.upbound.io/v1beta1
      kind: Route
      spec:
        forProvider:
          destinationCidrBlock: 0.0.0.0/0
          gatewayIdSelector:
            matchControllerRef: true
          routeTableIdSelector:
            matchControllerRef: true
            matchLabels:
              routetable: public
    readinessChecks:
      - type: MatchCondition
        matchCondition:
          status: 'True'
          type: Ready
    patches:
    - type: PatchSet
      patchSetName: default-patchset
  - name: nodepool-security-group
    base:
      apiVersion: ec2.aws.upbound.io/v1beta1
      kind: SecurityGroup
      metadata:
        labels: 
          securitygroup: nodepool
      spec:
        forProvider:
          name: nodepool-security-group
          description: Security group for EKS node pools
          vpcIdSelector:
            matchControllerRef: true
    readinessChecks:
      - type: MatchCondition
        matchCondition:
          status: 'True'
          type: Ready
    patches:
    - type: PatchSet
      patchSetName: default-patchset
  - name: nodepool-security-group-egress
    base:
      apiVersion: ec2.aws.upbound.io/v1beta1
      kind: SecurityGroupRule
      spec:
        forProvider:
          description: Allow all outbound traffic
          securityGroupIdSelector:
            matchControllerRef: true
            matchLabels:
              securitygroup: nodepool
          type: egress
          fromPort: 0
          toPort: 0
          protocol: "-1"
          cidrBlocks:
          -  0.0.0.0/0
    readinessChecks:
      - type: MatchCondition
        matchCondition:
          status: 'True'
          type: Ready
    patches:
    - type: PatchSet
      patchSetName: default-patchset
  - name: iamrole-controlplane
    base:
      apiVersion: iam.aws.upbound.io/v1beta1
      kind: Role
      metadata:
        labels: 
          iamrole: controlplane
      spec:
        forProvider:
          managedPolicyArns:
            - arn:aws:iam::aws:policy/AmazonEKSClusterPolicy
            - arn:aws:iam::aws:policy/AmazonEKSServicePolicy
          assumeRolePolicy: |
            {
              "Version": "2012-10-17",
              "Statement": [
                  {
                      "Effect": "Allow",
                      "Principal": {
                          "Service": [
                              "eks.amazonaws.com"
                          ]
                      },
                      "Action": [
                          "sts:AssumeRole"
                      ]
                  }
              ]
            }
    readinessChecks:
      - type: MatchCondition
        matchCondition:
          status: 'True'
          type: Ready
    patches:
    - type: PatchSet
      patchSetName: default-patchset
    - type: FromCompositeFieldPath
      fromFieldPath: spec.parameters.clusterName
      toFieldPath: spec.forProvider.tags.Name
      transforms:
        - type: string
          string:
            fmt: "%s-crossplane-ekscluster-controlplane-role"
            type: Format
    - type: FromCompositeFieldPath
      fromFieldPath: spec.parameters.clusterName
      toFieldPath: spec.forProvider.name
      transforms:
        - type: string
          string:
            fmt: "%s-crossplane-ekscluster-controlplane-role"
            type: Format
  - name: iamrole-nodegroup
    base:
      apiVersion: iam.aws.upbound.io/v1beta1
      kind: Role
      metadata:
        labels: 
          iamrole: nodegroup
      spec:
        forProvider:
          managedPolicyArns:
            - arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy
            - arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy
            - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
          assumeRolePolicy: |
            {
              "Version": "2012-10-17",
              "Statement": [
                  {
                      "Effect": "Allow",
                      "Principal": {
                          "Service": [
                              "ec2.amazonaws.com"
                          ]
                      },
                      "Action": [
                          "sts:AssumeRole"
                      ]
                  }
              ]
            }
    readinessChecks:
      - type: MatchCondition
        matchCondition:
          status: 'True'
          type: Ready
    patches:
    - type: PatchSet
      patchSetName: default-patchset
    - type: FromCompositeFieldPath
      fromFieldPath: spec.parameters.clusterName
      toFieldPath: spec.forProvider.tags.Name
      transforms:
        - type: string
          string:
            fmt: "%s-crossplane-ekscluster-nodegroup-role"
            type: Format
    - type: FromCompositeFieldPath
      fromFieldPath: spec.parameters.clusterName
      toFieldPath: spec.forProvider.name
      transforms:
        - type: string
          string:
            fmt: "%s-crossplane-ekscluster-nodegroup-role"
            type: Format
