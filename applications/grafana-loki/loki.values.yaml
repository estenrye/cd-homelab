ingress:
  enabled: true
  ingressClassName: nginx
  annotations:
    kubernetes.io/tls-acme: 'true'
    cert-manager.io/cluster-issuer: cloudflare-dns01-issuer
    external-dns.alpha.kubernetes.io/hostname: loki.rye.ninja
  #    nginx.ingress.kubernetes.io/auth-type: basic
  #    nginx.ingress.kubernetes.io/auth-secret: loki-distributed-basic-auth
  #    nginx.ingress.kubernetes.io/auth-secret-type: auth-map
  #    nginx.ingress.kubernetes.io/configuration-snippet: |
  #      proxy_set_header X-Scope-OrgID $remote_user;
  paths:
    write:
      - /api/prom/push
      - /loki/api/v1/push
    read:
      - /api/prom/tail
      - /loki/api/v1/tail
      - /loki/api
      - /api/prom/rules
      - /loki/api/v1/rules
      - /prometheus/api/v1/rules
      - /prometheus/api/v1/alerts
    singleBinary:
      - /api/prom/push
      - /loki/api/v1/push
      - /api/prom/tail
      - /loki/api/v1/tail
      - /loki/api
      - /api/prom/rules
      - /loki/api/v1/rules
      - /prometheus/api/v1/rules
      - /prometheus/api/v1/alerts
  hosts:
    - loki.rye.com
  tls:
    - secretName: loki-gateway-tls
      hosts:
        - loki.rye.ninja
gateway:
  enabled: false
loki:
  storage:
    bucketNames:
      chunks: loki-chunks
      ruler: loki-ruler
      admin: loki-admin
    type: s3
    s3:
      s3: s3://minio.minio-tenant.svc
      s3ForcePathStyle: true
      insecure: true
  memcached:
    chunk_cache:
      enabled: true
      service: "chunk-cache-memcached"
      batch_size: 256
      parallelism: 10
    results_cache:
      enabled: true
      service: "results-cache-memcached"
      timeout: "500ms"
      default_validity: "12h"

backend:
  extraEnv:
    - name: S3_ACCESS_KEY
      valueFrom:
        secretKeyRef:
          name: s3-credentials
          key: username
    - name: S3_SECRET_KEY
      valueFrom:
        secretKeyRef:
          name: s3-credentials
          key: password
  extraArgs:
    - -s3.access-key-id=${S3_ACCESS_KEY}
    - -s3.secret-access-key=${S3_SECRET_KEY}
  persistence:
    storageClass: direct-csi-min-io

read:
  extraEnv:
    - name: S3_ACCESS_KEY
      valueFrom:
        secretKeyRef:
          name: s3-credentials
          key: username
    - name: S3_SECRET_KEY
      valueFrom:
        secretKeyRef:
          name: s3-credentials
          key: password
  extraArgs:
    - -s3.access-key-id=${S3_ACCESS_KEY}
    - -s3.secret-access-key=${S3_SECRET_KEY}
  persistence:
    storageClass: direct-csi-min-io

write:
  extraEnv:
    - name: S3_ACCESS_KEY
      valueFrom:
        secretKeyRef:
          name: s3-credentials
          key: username
    - name: S3_SECRET_KEY
      valueFrom:
        secretKeyRef:
          name: s3-credentials
          key: password
  extraArgs:
    - -s3.access-key-id=${S3_ACCESS_KEY}
    - -s3.secret-access-key=${S3_SECRET_KEY}
  persistence:
    storageClass: direct-csi-min-io