loki:
  storage:
    bucketNames:
      chunks: loki-chunks
      ruler: loki-ruler
      admin: loki-admin
    type: s3
    s3:
      s3: s3://minio.minio-tenant.svc
      s3ForcePathStyle: true
      insecure: true
  memcached:
    chunk_cache:
      enabled: true
      host: "chunk-cache-memcached.loki.svc:11211"
    results_cache:
      enabled: true
      host: "results-cache-memcached.loki.svc:11211"
      timeout: "500ms"
      default_validity: "12h"

backend:
  extraEnv:
    - name: S3_ACCESS_KEY
      valueFrom:
        secretKeyRef:
          name: s3-credentials
          key: username
    - name: S3_SECRET_KEY
      valueFrom:
        secretKeyRef:
          name: s3-credentials
          key: password
  extraArgs:
    - -s3.access-key-id=${S3_ACCESS_KEY}
    - -s3.secret-access-key=${S3_SECRET_KEY}
  persistence:
    storageClass: direct-csi-min-io

read:
  extraEnv:
    - name: S3_ACCESS_KEY
      valueFrom:
        secretKeyRef:
          name: s3-credentials
          key: username
    - name: S3_SECRET_KEY
      valueFrom:
        secretKeyRef:
          name: s3-credentials
          key: password
  extraArgs:
    - -s3.access-key-id=${S3_ACCESS_KEY}
    - -s3.secret-access-key=${S3_SECRET_KEY}
  persistence:
    storageClass: direct-csi-min-io

write:
  extraEnv:
    - name: S3_ACCESS_KEY
      valueFrom:
        secretKeyRef:
          name: s3-credentials
          key: username
    - name: S3_SECRET_KEY
      valueFrom:
        secretKeyRef:
          name: s3-credentials
          key: password
  extraArgs:
    - -s3.access-key-id=${S3_ACCESS_KEY}
    - -s3.secret-access-key=${S3_SECRET_KEY}
  persistence:
    storageClass: direct-csi-min-io