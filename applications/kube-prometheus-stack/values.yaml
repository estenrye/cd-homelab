fullnameOverride: prometheus

defaultRules:
  create: true
  rules:
    alertmanager: true
    etcd: true
    configReloaders: true
    general: true
    k8s: true
    kubeApiserverAvailability: true
    kubeApiserverBurnrate: true
    kubeApiserverHistogram: true
    kubeApiserverSlos: true
    kubelet: true
    kubeProxy: true
    kubePrometheusGeneral: true
    kubePrometheusNodeRecording: true
    kubernetesApps: true
    kubernetesResources: true
    kubernetesStorage: true
    kubernetesSystem: true
    kubeScheduler: true
    kubeStateMetrics: true
    network: true
    node: true
    nodeExporterAlerting: true
    nodeExporterRecording: true
    prometheus: true
    prometheusOperator: true

  ## Reduce app namespace alert scope
  appNamespacesTarget: ".*"

  ## Labels for default rules
  labels: {}
  ## Annotations for default rules
  annotations: {}

  ## Additional labels for PrometheusRule alerts
  additionalRuleLabels: {}

  ## Additional annotations for PrometheusRule alerts
  additionalRuleAnnotations: {}

  ## Prefix for runbook URLs. Use this to override the first part of the runbookURLs that is common to all rules.
  runbookUrl: "https://runbooks.prometheus-operator.dev/runbooks"

  ## Disabled PrometheusRule alerts
  disabled: {}
  # KubeAPIDown: true
  # NodeRAIDDegraded: true

## Provide custom recording or alerting rules to be deployed into the cluster.
##
additionalPrometheusRulesMap: {}
#  rule-name:
#    groups:
#    - name: my_group
#      rules:
#      - record: my_record
#        expr: 100 * my_record


## Configuration for alertmanager
## ref: https://prometheus.io/docs/alerting/alertmanager/
##
alertmanager:
  fullnameOverride: alertmanager
  enabled: true
  ingress:
    enabled: true
    ingressClassName: nginx
    annotations:
      external-dns.alpha.kubernetes.io/hostname: "alert-manager.rye.ninja."
      external-dns.alpha.kubernetes.io/ttl: "120"
      cert-manager.io/cluster-issuer: cloudflare-dns01-issuer
      kubernetes.io/tls-acme: "true"
    hosts:
      - alertmanager.rye.ninja
    pathType: ImplementationSpecific
    paths:
      - /
    tls:
      - secretName: alertmanager-general-tls
        hosts:
          - alertmanager.rye.ninja
  alertmanagerSpec:
    replicas: 1
    retention: 120h
    storage:
      volumeClaimTemplate:
        spec:
          storageClassName: direct-csi-min-io
          accessModes: ["ReadWriteOnce"]
          resources:
            requests:
              storage: 50Gi
    routePrefix: /
    # TODO: review alert-manager resources
    resources:
      requests:
        cpu: 100m
        memory: 400Mi

grafana:
  fullnameOverride: grafana
  enabled: true
  # TODO: review grafana replicas
  replicas: 1
  # TODO: review grafana resources
  resources:
    # limits:
    #   cpu: 100m
    #   memory: 128Mi
    requests:
      cpu: 100m
      memory: 128Mi

  ## Create HorizontalPodAutoscaler object for deployment type
  # TODO: review grafana autoscaling
  autoscaling:
    enabled: false
  #   minReplicas: 1
  #   maxReplicas: 10
  #   metrics:
  #   - type: Resource
  #     resource:
  #       name: cpu
  #       targetAverageUtilization: 60
  #   - type: Resource
  #     resource:
  #       name: memory
  #       targetAverageUtilization: 60

  forceDeployDatasources: false
  forceDeployDashboards: false
  defaultDashboardsEnabled: true
  defaultDashboardsTimezone: utc

  adminPassword: prom-operator
  ingress:
    enabled: true
    ingressClassName: nginx
    annotations:
      external-dns.alpha.kubernetes.io/hostname: "grafana.rye.ninja."
      external-dns.alpha.kubernetes.io/ttl: "120"
      cert-manager.io/cluster-issuer: cloudflare-dns01-issuer
      kubernetes.io/tls-acme: "true"
    hosts:
      - grafana.rye.ninja
    path: /
    tls: 
      - secretName: grafana-general-tls
        hosts:
          - grafana.rye.ninja
  persistence:
    type: pvc
    enabled: true
    storageClassName: direct-csi-min-io
    accessModes:
      - ReadWriteOnce
    size: 10Gi
    finalizers:
      - kubernetes.io/pvc-protection
  serviceMonitor:
    enabled: true
  admin:
    existingSecret: grafana-admin-credentials
    userKey: username
    passwordKey: password

## Component scraping the kube api server
##
kubeApiServer:
  enabled: true

## Component scraping the kubelet and kubelet-hosted cAdvisor
##
kubelet:
  enabled: true

## Component scraping the kube controller manager
##
kubeControllerManager:
  enabled: true

## Component scraping coreDns. Use either this or kubeDns
##
coreDns:
  enabled: true

## Component scraping kubeDns. Use either this or coreDns
##
kubeDns:
  enabled: false

## Component scraping etcd
##
kubeEtcd:
  enabled: true

## Component scraping kube scheduler
##
kubeScheduler:
  enabled: true

## Component scraping kube proxy
##
kubeProxy:
  enabled: true

## Component scraping kube state metrics
##
kubeStateMetrics:
  enabled: true

## Configuration for kube-state-metrics subchart
##
kube-state-metrics:
  fullnameOverride: kube-state-metrics

## Deploy node exporter as a daemonset to all nodes
##
nodeExporter:
  enabled: true

## Configuration for prometheus-node-exporter subchart
##
prometheus-node-exporter:
  fullnameOverride: prometheus-node-exporter
  #TODO: Review node-exporter resources
  resources:
    limits:
      cpu: 200m
      memory: 50Mi
    requests:
      cpu: 100m
      memory: 30Mi
  extraArgs:
    - --collector.filesystem.mount-points-exclude=^/(dev|proc|sys|var/lib/docker/.+|var/lib/kubelet/.+)($|/)
    - --collector.filesystem.fs-types-exclude=^(autofs|binfmt_misc|bpf|cgroup2?|configfs|debugfs|devpts|devtmpfs|fusectl|hugetlbfs|iso9660|mqueue|nsfs|overlay|proc|procfs|pstore|rpc_pipefs|securityfs|selinuxfs|squashfs|sysfs|tracefs)$

## Manages Prometheus and Alertmanager components
##
prometheusOperator:
  enabled: true
  kubeletService:
    enabled: true
  #TODO: Review prometheusOperator resources
  resources:
    limits:
      cpu: 200m
      memory: 200Mi
    requests:
      cpu: 100m
      memory: 100Mi
  tolerations: []
  # - key: "key"
  #   operator: "Equal"
  #   value: "value"
  #   effect: "NoSchedule"

  prometheusConfigReloader:
    # image to use for config and rule reloading
    image:
      repository: quay.io/prometheus-operator/prometheus-config-reloader
      tag: v0.58.0
      sha: ""

    #TODO: Review resource config for prometheusConfigReloader
    resources:
      requests:
        cpu: 200m
        memory: 50Mi
      limits:
        cpu: 200m
        memory: 50Mi

## Deploy a Prometheus instance
##
prometheus:
  enabled: true
  thanosService:
    enabled: false
  thanosServiceMonitor:
    enabled: false
  thanosServiceExternal:
    enabled: false
  servicePerReplica:
    enabled: false
  thanosIngress:
    enabled: false
  ingress:
    enabled: true
    ingressClassName: nginx
    annotations:
      external-dns.alpha.kubernetes.io/hostname: "prometheus.rye.ninja."
      external-dns.alpha.kubernetes.io/ttl: "120"
      cert-manager.io/cluster-issuer: cloudflare-dns01-issuer
      kubernetes.io/tls-acme: "true"
    hosts:
      - prometheus.rye.ninja
    paths:
     - /
    pathType: ImplementationSpecific
    tls:
      - secretName: prometheus-general-tls
        hosts:
          - prometheus.rye.ninja

  ## Settings affecting prometheusSpec
  ## ref: https://github.com/prometheus-operator/prometheus-operator/blob/main/Documentation/api.md#prometheusspec
  ##
  prometheusSpec:
    enableAdminAPI: true
    tolerations: []
    #  - key: "key"
    #    operator: "Equal"
    #    value: "value"
    #    effect: "NoSchedule"


    ## How long to retain metrics
    ##
    retention: 10d

    ## Maximum size of metrics
    ##
    retentionSize: ""

    ## Enable compression of the write-ahead log using Snappy.
    ##
    walCompression: false

    ## Log format for Prometheus be configured in
    ##
    logFormat: json

    ## Prefix used to register routes, overriding externalUrl route.
    ## Useful for proxies that rewrite URLs.
    ##
    routePrefix: /

    ## The remote_read spec configuration for Prometheus.
    ## ref: https://github.com/prometheus-operator/prometheus-operator/blob/main/Documentation/api.md#remotereadspec
    remoteRead: []
    # - url: http://remote1/read
    ## additionalRemoteRead is appended to remoteRead
    additionalRemoteRead: []

    ## The remote_write spec configuration for Prometheus.
    ## ref: https://github.com/prometheus-operator/prometheus-operator/blob/main/Documentation/api.md#remotewritespec
    remoteWrite: []
    # - url: http://remote1/push
    ## additionalRemoteWrite is appended to remoteWrite
    additionalRemoteWrite: []

    ## Enable/Disable Grafana dashboards provisioning for prometheus remote write feature
    remoteWriteDashboards: false

    ## TODO: Resource limits & requests
    ##
    resources:
      requests:
        memory: 400Mi

    ## Prometheus StorageSpec for persistent data
    ## ref: https://github.com/prometheus-operator/prometheus-operator/blob/main/Documentation/user-guides/storage.md
    ##
    storageSpec:
     volumeClaimTemplate:
       spec:
         storageClassName: direct-csi-min-io
         accessModes: ["ReadWriteOnce"]
         resources:
           requests:
             storage: 50Gi

## Configuration for thanosRuler
## ref: https://thanos.io/tip/components/rule.md/
##
thanosRuler:
  enabled: false
  ingress:
    enabled: false

## Setting to true produces cleaner resource names, but requires a data migration because the name of the persistent volume changes. Therefore this should only be set once on initial installation.
##
cleanPrometheusOperatorObjectNames: false