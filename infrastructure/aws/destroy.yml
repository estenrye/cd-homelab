- hosts: localhost
  connection: local
  tasks:
    - name: Get VPC Id
      amazon.aws.ec2_vpc_net_info:
        filters:
          "tag:Name": "{{ vpc.name }}"
      register: vpc_info
    - name: Ensure only one vpc info object is returned.
      ansible.builtin.assert:
        that:
          - vpc_info.vpcs | length == 1
    - name: Set vpc_id
      ansible.builtin.set_fact:
        vpc_id: "{{ vpc_info.vpcs[0].id }}"

    - name: Get Subnet Info
      amazon.aws.ec2_vpc_subnet_info:
        region: "{{ aws.region }}"
        filters:
          vpc-id: "{{ vpc_id }}"
      register: subnet_info

    - name: Delete Nodes
      amazon.aws.ec2_instance:
        region: "{{ aws.region }}"
        vpc_subnet_id: "{{ item.id }}"
        state: absent
        wait: true
      loop: "{{ subnet_info.subnets }}"

    - name: Get Security Group Info
      amazon.aws.ec2_group_info:
        region: "{{ aws.region }}"
        filters:
          vpc-id: "{{ vpc_id }}"
      register: security_group_info

    - name: Delete Security Groups
      amazon.aws.ec2_group:
        group_id: "{{ item.group_id }}"
        region: "{{ aws.region }}"
        vpc_id: "{{ vpc_id }}"
        state: absent
      loop: "{{ security_group_info.security_groups }}"
      when: item.group_name != 'default'

    - name: Get Route Table Info
      amazon.aws.ec2_vpc_route_table_info:
        region: "{{ aws.region }}"
        filters:
          vpc-id: "{{ vpc_id }}"
      register: route_table_info

    - name: Delete Route Tables
      amazon.aws.ec2_vpc_route_table:
        region: "{{ aws.region }}"
        route_table_id: "{{ item.route_table_id }}"
        vpc_id: "{{ vpc_id }}"
        lookup: id
        state: absent
      loop: "{{ route_table_info.route_tables }}"
      when: >-
        (item.associations | length >=1 and not item.associations[0].main)
        or item.associations | length == 0

    - name: Get NAT Gateways
      amazon.aws.ec2_vpc_nat_gateway_info:
        filters:
          vpc-id: "{{ vpc_id }}"
      register: nat_gateway_info

    - name: Delete NAT Gateways
      amazon.aws.ec2_vpc_nat_gateway:
        nat_gateway_id: "{{ item.nat_gateway_id }}"
        subnet_id: "{{ item.subnet_id }}"
        state: absent
        wait: true
      loop: "{{ nat_gateway_info.result }}"

    - name: Delete Internet Gateway
      amazon.aws.ec2_vpc_igw:
        state: absent
        vpc_id: "{{ vpc_id }}"

    - name: Delete Subnets
      amazon.aws.ec2_vpc_subnet:
        vpc_id: "{{ vpc_id }}"
        region: "{{ aws.region }}"
        cidr: "{{ item.cidr_block }}"
        state: absent
        wait: true
      loop: "{{ subnet_info.subnets }}"

    - name: Delete VPC
      amazon.aws.ec2_vpc_net:
        vpc_id: "{{ vpc_id }}"
        region: "{{ aws.region }}"
        state: absent

    - name: Delete IAM Policy for EC2 Instances
      community.aws.iam_policy:
        iam_type: role
        iam_name: "{{ vpc.name }}-modify-private-ip-address"
        policy_name: "{{ vpc.name }}-modify-private-ip-address"
        state: absent

    - name: Delete IAM Role for EC2 Instances
      community.aws.iam_role:
        name: "{{ vpc.name }}-modify-private-ip-address"
        state: absent
