version: '3'

env:
  ENV: dev

dotenv: [ '.env/.env', '.env/{{.ENV}}.env', '{{.HOME}}/.env']

tasks:
  op-connect:
    desc: Run the 1Password Connect API.
    dir: ${HOME}/.op-connect
    cmds:
      - task: init-op-connect
      - open -a Docker
      - docker compose up -d

  init-op-connect:
    desc: Initialize the 1Password Connect API credentials.
    dir: ../../docker-compose/tools.rye.ninja
    cmds:
      - rm -rf ${HOME}/.op-connect ${HOME}/.haproxy ${HOME}/.uptimekuma
      - mkdir -p ${HOME}/.op-connect ${HOME}/.haproxy ${HOME}/.uptimekuma
      - chmod 700 ${HOME}/.op-connect
      - chmod 777 ${HOME}/.uptimekuma
      - cp haproxy/haproxy.cfg ${HOME}/.haproxy/haproxy.cfg
      - export DOCKER_USER="esten:staff"
      - envsubst < docker-compose.yaml > ${HOME}/.op-connect/docker-compose.yml
      - op read "{{ .OP_CONNECT_CREDS_PATH }}" > ${HOME}/.op-connect/1password-credentials.json

  tf-crds:
    desc: Generate Terraform resources from CRDs.
    dir: remote-backend/tf-crds
    cmds:
      - curl https://raw.githubusercontent.com/prometheus-community/helm-charts/main/charts/kube-prometheus-stack/charts/crds/crds/crd-alertmanagerconfigs.yaml | tfk8s > crd_alertmanagerconfigs.tf
      - curl https://raw.githubusercontent.com/prometheus-community/helm-charts/main/charts/kube-prometheus-stack/charts/crds/crds/crd-alertmanagers.yaml | tfk8s > crd_alertmanagers.tf
      - curl https://raw.githubusercontent.com/prometheus-community/helm-charts/main/charts/kube-prometheus-stack/charts/crds/crds/crd-podmonitors.yaml | tfk8s > crd_podmonitors.tf
      - curl https://raw.githubusercontent.com/prometheus-community/helm-charts/main/charts/kube-prometheus-stack/charts/crds/crds/crd-probes.yaml | tfk8s > crd_probes.tf
      - curl https://raw.githubusercontent.com/prometheus-community/helm-charts/main/charts/kube-prometheus-stack/charts/crds/crds/crd-prometheusagents.yaml | tfk8s > crd_prometheusagents.tf
      - curl https://raw.githubusercontent.com/prometheus-community/helm-charts/main/charts/kube-prometheus-stack/charts/crds/crds/crd-prometheuses.yaml | tfk8s > crd_prometheuses.tf
      - curl https://raw.githubusercontent.com/prometheus-community/helm-charts/main/charts/kube-prometheus-stack/charts/crds/crds/crd-prometheusrules.yaml | tfk8s > crd_prometheusrules.tf
      - curl https://raw.githubusercontent.com/prometheus-community/helm-charts/main/charts/kube-prometheus-stack/charts/crds/crds/crd-scrapeconfigs.yaml | tfk8s > crd_scrapeconfigs.tf
      - curl https://raw.githubusercontent.com/prometheus-community/helm-charts/main/charts/kube-prometheus-stack/charts/crds/crds/crd-servicemonitors.yaml | tfk8s > crd_servicemonitors.tf
      - curl https://raw.githubusercontent.com/prometheus-community/helm-charts/main/charts/kube-prometheus-stack/charts/crds/crds/crd-thanosrulers.yaml | tfk8s > crd_thanosrulers.tf
      - curl https://raw.githubusercontent.com/1Password/connect-helm-charts/main/charts/connect/crds/onepassworditem-crd.yaml | tfk8s > crd_onepassworditem.tf
      - curl https://raw.githubusercontent.com/kubernetes-sigs/external-dns/master/charts/external-dns/crds/dnsendpoint.yaml | tfk8s > crd_dnsendpoint.tf
      - curl -L https://github.com/cert-manager/cert-manager/releases/download/v1.14.4/cert-manager.crds.yaml | tfk8s > crd_certmanager.tf
      - curl https://github.com/kubernetes-sigs/gateway-api/releases/download/v1.0.0/experimental-install.yaml | tfk8s > crd_gatewayapi.tf
  tf-init:
    desc: Initialize the Terraform backend.
    cmds:
      - task: tf
        vars:
          PATH: "{{ .USER_ }}"
          ACTION: init

  tf-manifests:
    desc: Generate Terraform kubernetes manifests.
    dir: remote-backend/tf-workload/yaml/gatewayapi_state_metrics
    cmds:
      - curl -L https://raw.githubusercontent.com/Kuadrant/gateway-api-state-metrics/main/config/default/custom-resource-state.yaml -o custom-resource-state.yaml
      - curl -L https://raw.githubusercontent.com/Kuadrant/gateway-api-state-metrics/main/config/default/kustomization.yaml -o kustomization.yaml
      - kustomize build . | tfk8s > ../../gatewayapi_state_metrics.tf
  tf-init-upgrade:
    desc: Upgrade the Terraform backend.
    cmds:
      - task: tf
        vars:
          ACTION: init
          ARGS: -upgrade

  tf-plan:
    desc: Plan the Terraform backend.
    cmds:
      - task: tf
        vars:
          ACTION: plan

  tf-apply:
    desc: Apply the Terraform backend.
    cmds:
      - task: tf
        vars:
          ACTION: apply

  tf-destroy:
    desc: Destroy the Terraform backend.
    cmds:
      - task: tf
        vars:
          ACTION: destroy
  
  # TODO: Figure out how to automate the renewal of the Rackspace SPOT token.
  tf:
    desc: Plan the Terraform workspace.
    dir: "{{ .USER_WORKING_DIR }}"
    internal: true
    cmds:
      - |
        echo "path: {{ .USER_WORKING_DIR }}"
        OP_CONNECT_TOKEN=`op read "{{ .OP_CONNECT_TOKEN_PATH }}"` \
        AWS_ACCESS_KEY_ID=`op read "{{ .AWS_ACCESS_KEY_PATH }}"` \
        AWS_SECRET_ACCESS_KEY=`op read "{{ .AWS_SECRET_KEY_PATH }}"` \
        RXTSPOT_TOKEN=`op read "{{ .RXTSPOT_TOKEN_PATH }}"` \
        {{ .OPENTF_BIN }} {{ .ACTION }} {{ .ARGS }}

  k-logs-external-dns:
    desc: Get the logs for the external-dns pod.
    cmds:
      - kubectl logs -n external-dns -l app.kubernetes.io/instance=external-dns -f

  k-logs-envoy-gateway:
    desc: Get the logs for the envoy-gateway pod.
    cmds:
      - kubectl logs -n envoy-gateway-system -l app.kubernetes.io/instance=envoy-gateway-system -f