- name: Check for Template
  block:
    - name: Check to see if Proxmox VM Template is present.
      ansible.builtin.shell:
        cmd: "/usr/sbin/qm config {{ image.vm_id }} | grep 'template\\: 1'"
      changed_when: false
    - name: Delete Proxmox VM Template
      ansible.builtin.command:
        cmd: /usr/sbin/qm destroy {{ image.vm_id }}
  rescue:
    - name: Notify the user that the template does not exist.
      ansible.builtin.debug:
        msg: "Template does not exist. Continuing with install."

- name: Download VM Image File
  ansible.builtin.get_url:
    checksum: "{{ image.checksum }}"
    dest: /local-data/images/{{ image.url | basename }}
    url: "{{ image.url }}"
  register: image_download

- name: write sshkeys to file
  ansible.builtin.copy:
    dest: /local-data/images/ssh_keys
    content: "{{ sshkeys | join('\n') }}"
  register: sshkeys_result

- name: Create Proxmox VM
  ansible.builtin.command:
    cmd: >
      /usr/sbin/qm create {{ image.vm_id }} 
        --name "{{ image.template_name }}" 
        --memory 8192 
        --cores 4
        --net0 virtio,bridge=vmbr0
        --scsihw virtio-scsi-pci
        --boot c
        --ide2 "{{ data_store }}:cloudinit"
        --serial0 socket
        --vga serial0
        --agent enabled=1
        --ciupgrade 0
        --ciuser {{ image.ciuser }}
        --sshkeys '{{ sshkeys_result.dest }}'
        --ipconfig0 'ip={{ image.ipv4_address }}/{{ ipv4.subnet_size }},gw={{ ipv4.gateway }}'
        --searchdomain '{{ searchdomain }}'
        --nameserver '{{ nameserver | join(' ') }}'
    creates: /etc/pve/nodes/{{ inventory_hostname | split('.') | first }}/qemu-server/{{ image.vm_id }}.conf

# Import disk Image

- name: Check for disk image
  block:
    - name: Check for imported disk image
      ansible.builtin.shell:
        cmd: rbd ls {{ data_store }} | grep vm-{{ image.vm_id }}-disk-0
      changed_when: false
      register: check_disk_result
  rescue:
    - name: Import disk image to Proxmox VM
      ansible.builtin.command:
        cmd: >
          /usr/sbin/qm disk import {{ image.vm_id }}
            {{ image_download.dest }}
            {{ data_store }}
    - name: Set disk image to boot
      ansible.builtin.command:
        cmd: >
          /usr/sbin/qm set {{ image.vm_id }} 
            --scsi0 "{{ data_store }}:vm-{{ image.vm_id }}-disk-0"
            --bootdisk scsi0

# start vm

- name: Check to see if Proxmox VM is in started state.
  ansible.builtin.shell:
    cmd: "/usr/sbin/qm status {{ image.vm_id }} | grep 'status\\: running'"
  register: check_vmstate_result
  ignore_errors: true
  changed_when: false

- name: Start Proxmox VM
  ansible.builtin.shell:
    cmd: qm start {{ image.vm_id }}
  when:
    - check_vmstate_result.failed

- name: Wait for VM to start
  ansible.builtin.pause:
    seconds: "{{ image.boot_timeout | default(60) }}"
  when:
    - check_vmstate_result.failed

- name: Check to see if Proxmox VM is in started state.
  ansible.builtin.shell:
    cmd: "/usr/sbin/qm status {{ image.vm_id }} | grep 'status\\: running'"
  register: check_vmstate_result
  ignore_errors: true
  changed_when: false

- name: Update apt cache
  ansible.builtin.apt:
    update_cache: true
  delegate_to: "{{ image.ciuser }}@{{ image.ipv4_address }}"
  become: true
  when:
    - image.package_manager == 'apt'
    - check_vmstate_result

- name: Install packages
  ansible.builtin.package:
    name:
      - qemu-guest-agent
      - cloud-init
      - vim
  delegate_to: "{{ image.ciuser }}@{{ image.ipv4_address }}"
  become: true
  when:
    - check_vmstate_result

- name: Reboot to activate agent
  ansible.builtin.reboot:
  delegate_to: "{{ image.ciuser }}@{{ image.ipv4_address }}"
  become: true
  when:

    - check_vmstate_result

- name: Shutdown Proxmox VM
  ansible.builtin.command:
    cmd: /usr/sbin/qm shutdown {{ image.vm_id }} --timeout 600
  when:
    - check_vmstate_result

# enable dhcp before converting to template

- name: Set DHCP and Clear MAC address
  ansible.builtin.command:
    cmd: /usr/sbin/qm set {{ image.vm_id }} --ipconfig0 'ip=dhcp' --net0 virtio,bridge=vmbr0

# Convert to Template

- name: Convert to Template
  ansible.builtin.command:
    cmd: /usr/sbin/qm template {{ image.vm_id }}
