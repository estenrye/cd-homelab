- name: Check for Template
  block:
    - name: Check to see if Proxmox VM Template is present.
      ansible.builtin.shell:
        cmd: "/usr/sbin/qm config {{ image.vm_id }} | grep 'template\\: 1'"
      changed_when: false
    - name: Delete Proxmox VM Template
      ansible.builtin.command:
        cmd: /usr/sbin/qm destroy {{ image.vm_id }}
  rescue:
    - name: Notify the user that the template does not exist.
      ansible.builtin.debug:
        msg: "Template does not exist. Continuing with install."

- name: Set Checksum Url
  ansible.builtin.set_fact:
    checksum_url: "https://cloud-images.ubuntu.com/minimal/releases/{{ image.suite }}/release/SHA256SUMS"

- name: Set Image Url
  ansible.builtin.set_fact:
    image_url: "https://cloud-images.ubuntu.com/minimal/releases/{{ image.suite }}/release/ubuntu-{{ image.version }}-minimal-cloudimg-amd64.img"

- name: Download SHA256SUMS file
  get_url:
    url: "{{ checksum_url }}"
    dest: /local-data/images/{{ image_url | basename }}.sha256sums

- name: Retrieve checksum value
  shell: "grep {{ image_url | basename }} /local-data/images/{{ image_url | basename }}.sha256sums | awk '{print $1}'"
  changed_when: false
  register: checksum_value

- name: Print checksum value
  debug:
    var: checksum_value.stdout

- name: Download VM Image File
  ansible.builtin.get_url:
    checksum: "sha256:{{ checksum_value.stdout }}"
    dest: /local-data/images/{{ image_url | basename }}
    url: "{{ image_url }}"
  register: image_download

- name: write sshkeys to file
  ansible.builtin.copy:
    dest: /local-data/images/ssh_keys
    content: "{{ sshkeys | join('\n') }}"
  register: sshkeys_result

- name: Create Proxmox VM
  ansible.builtin.command:
    cmd: >
      /usr/sbin/qm create {{ image.vm_id }} 
        --name "ubuntu-{{ image.version | replace('.', '-') }}-minimal-{{ ansible_date_time.iso8601_basic_short }}" 
        --memory 8192 
        --cores 4
        --net0 virtio,bridge=vmbr0
        --scsihw virtio-scsi-pci
        --boot c
        --ide2 "{{ data_store }}:cloudinit"
        --serial0 socket
        --vga serial0
        --agent enabled=1
        --ciupgrade 0
        --ciuser {{ image.ciuser }}
        --sshkeys '{{ sshkeys_result.dest }}'
        --ipconfig0 'ip={{ image.ipv4_address }}/{{ ipv4.subnet_size }},gw={{ ipv4.gateway }}'
        --searchdomain '{{ searchdomain }}'
        --nameserver '{{ nameserver | join(' ') }}'
    creates: /etc/pve/nodes/{{ inventory_hostname | split('.') | first }}/qemu-server/{{ image.vm_id }}.conf

# Import disk Image

- name: Check for disk image
  block:
    - name: Check for imported disk image
      ansible.builtin.shell:
        cmd: rbd ls {{ data_store }} | grep vm-{{ image.vm_id }}-disk-0
      changed_when: false
      register: check_disk_result
  rescue:
    - name: Import disk image to Proxmox VM
      ansible.builtin.command:
        cmd: >
          /usr/sbin/qm disk import {{ image.vm_id }}
            {{ image_download.dest }}
            {{ data_store }}
    - name: Set disk image to boot
      ansible.builtin.command:
        cmd: >
          /usr/sbin/qm set {{ image.vm_id }} 
            --scsi0 "{{ data_store }}:vm-{{ image.vm_id }}-disk-0"
            --bootdisk scsi0
    - name: Resize disk image
      ansible.builtin.command:
        cmd: >
          /usr/sbin/qm resize {{ image.vm_id }} 
            scsi0 +{{ image.disk_size }}

# start vm

- name: Start VM
  block:
    - name: Check to see if Proxmox VM is in started state.
      ansible.builtin.shell:
        cmd: "/usr/sbin/qm status {{ image.vm_id }} | grep 'status\\: running'"
      changed_when: false
  rescue:
    - name: Start Proxmox VM
      ansible.builtin.shell:
        cmd: qm start {{ image.vm_id }}

- name: Wait up to 600 seconds for VM to boot, then timeout.
  ansible.builtin.wait_for_connection:
    timeout: 600
  delegate_to: "{{ image.ciuser }}@{{ image.ipv4_address }}"

- name: expand ext4 filesystem
  ansible.builtin.command:
    cmd: resize2fs /dev/sda1
  delegate_to: "{{ image.ciuser }}@{{ image.ipv4_address }}"
  become: true

- name: Write apt-fast sources
  ansible.builtin.template:
    src: ../templates/apt-fast.sources.j2
    dest: /etc/apt/sources.list.d/{{ source.name }}.sources
    owner: root
    group: root
    mode: 0644
    backup: no
  delegate_to: "{{ image.ciuser }}@{{ image.ipv4_address }}"
  become: true
  loop_control:
    loop_var: source
  loop:
    - name: 00-ubuntu
      types: deb
      uris: "{{ apt_mirror | default('http://archive.ubuntu.com') }}/ubuntu"
      suites: "{{ image.suite }} {{ image.suite }}-updates {{ image.suite }}-backports"
      components: main restricted universe multiverse
    - name: 00-ubuntu-src
      types: deb-src
      uris: "{{ apt_mirror | default('http://archive.ubuntu.com') }}/ubuntu"
      suites: "{{ image.suite }} {{ image.suite }}-updates {{ image.suite }}-backports"
      components: "main restricted universe multiverse"
      enabled: "no"
    - name: 00-ubuntu-security
      types: deb
      uris: "{{ apt_mirror | default('http://security.ubuntu.com') }}/ubuntu"
      suites: "{{ image.suite }}-security"
      components: main restricted universe multiverse
    - name: 00-ubuntu-security-src
      types: deb-src
      uris: "{{ apt_mirror | default('http://security.ubuntu.com') }}/ubuntu"
      suites: "{{ image.suite }}-security"
      components: main restricted universe multiverse
      enabled: "no"

- name: Remove /etc/apt/sources.list
  ansible.builtin.file:
    path: /etc/apt/sources.list
    state: absent
  delegate_to: "{{ image.ciuser }}@{{ image.ipv4_address }}"
  become: true

# - name: Replace URL in sources.list
#   ansible.builtin.replace:
#     path: /etc/apt/sources.list
#     regexp: '{{ item }}'
#     line: 'http://apt.tools.rye.ninja'
#     backup: no
#   delegate_to: "{{ image.ciuser }}@{{ image.ipv4_address }}"
#   become: true
#   loop:
#     - "http://archive.ubuntu.com"
#     - "http://security.ubuntu.com"

# - name: Copy sources.list to sources.list.tmpl
#   ansible.builtin.copy:
#     src: /etc/apt/sources.list
#     dest: /etc/cloud/templates/sources.list.tmpl
#     remote_src: yes
#   delegate_to: "{{ image.ciuser }}@{{ image.ipv4_address }}"
#   become: true

- name: Update apt cache
  ansible.builtin.apt:
    update_cache: true
  delegate_to: "{{ image.ciuser }}@{{ image.ipv4_address }}"
  become: true

- name: Install packages
  ansible.builtin.package:
    name:
      - qemu-guest-agent
      - cloud-init
      - vim
  delegate_to: "{{ image.ciuser }}@{{ image.ipv4_address }}"
  become: true

- name: Reboot to activate agent
  ansible.builtin.reboot:
  delegate_to: "{{ image.ciuser }}@{{ image.ipv4_address }}"
  become: true

- name: Shutdown Proxmox VM
  ansible.builtin.command:
    cmd: /usr/sbin/qm shutdown {{ image.vm_id }} --timeout 600

# enable dhcp before converting to template

- name: Set DHCP and Clear MAC address
  ansible.builtin.command:
    cmd: /usr/sbin/qm set {{ image.vm_id }} --ipconfig0 'ip=dhcp' --net0 virtio,bridge=vmbr0

# Convert to Template

- name: Convert to Template
  ansible.builtin.command:
    cmd: /usr/sbin/qm template {{ image.vm_id }}
