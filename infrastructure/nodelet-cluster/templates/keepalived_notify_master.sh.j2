#!/bin/bash
set -e

VRRP_GROUP_OR_INSTANCE=$1
VRRP_NAME=$2
STATE=$3
PRIORITY=$4

echo "$VRRP_GROUP_OR_INSTANCE $VRRP_NAME has transitioned to the $STATE state with a priority of $PRIORITY" > /var/run/keepalived_status

INSTANCE_ID=`ec2metadata --instance-id`
EC2_AVAIL_ZONE=`ec2metadata --availability-zone`
EC2_REGION="`echo \"$EC2_AVAIL_ZONE\" | sed 's/[a-z]$//'`"
SECONDARY_IP_ADDRESS='{{ nodeletConfig.masterIp }}'
CURRENT_NETWORK_INTERFACE_ID=`aws ec2 describe-network-interfaces \
    --region ${EC2_REGION} \
    --filters Name=addresses.private-ip-address,Values=${SECONDARY_IP_ADDRESS} \
    | jq -r '.NetworkInterfaces[0].NetworkInterfaceId'`

if [ 'null' != "${CURRENT_NETWORK_INTERFACE_ID}" ]; then
    aws ec2 unassign-private-ip-addresses \
    --private-ip-address "${SECONDARY_IP_ADDRESS}" \
    --network-interface-id "${CURRENT_NETWORK_INTERFACE_ID}" \
    --region "${EC2_REGION}"
fi

NETWORK_INTERFACE_ID=`aws ec2 describe-instances \
    --region ${EC2_REGION} \
    --filters Name=instance-id,Values=${INSTANCE_ID} \
    | jq -r '.Reservations[0].Instances[0].NetworkInterfaces[0].NetworkInterfaceId'`

aws ec2 assign-private-ip-addresses \
  --private-ip-address "${SECONDARY_IP_ADDRESS}" \
  --network-interface-id "${NETWORK_INTERFACE_ID}" \
  --region "${EC2_REGION}"

IP_ADDRESSES=`aws ec2 describe-instances \
--region ${EC2_REGION} \
--instance-id ${INSTANCE_ID} \
| jq -c -r '[ .Reservations[0].Instances[0].NetworkInterfaces[0].PrivateIpAddresses[].PrivateIpAddress + "/32" ]'`

cat > /etc/netplan/60-secondary-ip.yaml << EOF
network:
    version: 2
    renderer: networkd
    ethernets:
        ens3:
            addresses: ${IP_ADDRESSES}
EOF

netplan apply